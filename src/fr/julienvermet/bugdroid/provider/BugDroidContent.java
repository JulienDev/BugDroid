/*
* Copyright (C) 2013 Julien Vermet
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package fr.julienvermet.bugdroid.provider;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;
import fr.julienvermet.bugdroid.provider.util.ColumnMetadata;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class BugDroidContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + BugDroidProvider.AUTHORITY);

    private BugDroidContent() {
    }

	/**
	 * Created in version 1
	 */
    public static final class Instances extends BugDroidContent {

    	private static final String LOG_TAG = Instances.class.getSimpleName();

        public static final String TABLE_NAME = "instances";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-instances";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-instances";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            NAME("name", "text"),
            URL("url", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.NAME.getName(),
                Columns.URL.getName()
        };

        private Instances() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.URL.getName() + " " + Columns.URL.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.NAME.getName()).append(", ").append(Columns.URL.getName()).append(" ) VALUES (?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

	/**
	 * Created in version 1
	 */
    public static final class Products extends BugDroidContent {

    	private static final String LOG_TAG = Products.class.getSimpleName();

        public static final String TABLE_NAME = "products";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-products";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-products";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            INSTANCES_ID("instances_id", "integer"),
            ACCOUNTS_ID("accounts_id", "integer"),
            NAME("name", "text"),
            IMAGE("image", "text"),
            DESCRIPTION("description", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.INSTANCES_ID.getName(),
                Columns.ACCOUNTS_ID.getName(),
                Columns.NAME.getName(),
                Columns.IMAGE.getName(),
                Columns.DESCRIPTION.getName()
        };

        private Products() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.INSTANCES_ID.getName() + " " + Columns.INSTANCES_ID.getType() + ", " + Columns.ACCOUNTS_ID.getName() + " " + Columns.ACCOUNTS_ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.IMAGE.getName() + " " + Columns.IMAGE.getType() + ", " + Columns.DESCRIPTION.getName() + " " + Columns.DESCRIPTION.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX products_instances_id on " + TABLE_NAME + "(" + Columns.INSTANCES_ID.getName() + ");");
            db.execSQL("CREATE INDEX products_accounts_id on " + TABLE_NAME + "(" + Columns.ACCOUNTS_ID.getName() + ");");
        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.INSTANCES_ID.getName()).append(", ").append(Columns.ACCOUNTS_ID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.IMAGE.getName()).append(", ").append(Columns.DESCRIPTION.getName()).append(" ) VALUES (?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.INSTANCES_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.ACCOUNTS_ID.getName()));
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.IMAGE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESCRIPTION.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

	/**
	 * Created in version 1
	 */
    public static final class Accounts extends BugDroidContent {

    	private static final String LOG_TAG = Accounts.class.getSimpleName();

        public static final String TABLE_NAME = "accounts";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-accounts";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-accounts";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            INSTANCES_ID("instances_id", "integer"),
            EMAIL("email", "text"),
            PASSWORD("password", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.INSTANCES_ID.getName(),
                Columns.EMAIL.getName(),
                Columns.PASSWORD.getName()
        };

        private Accounts() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.INSTANCES_ID.getName() + " " + Columns.INSTANCES_ID.getType() + ", " + Columns.EMAIL.getName() + " " + Columns.EMAIL.getType() + ", " + Columns.PASSWORD.getName() + " " + Columns.PASSWORD.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX accounts_instances_id on " + TABLE_NAME + "(" + Columns.INSTANCES_ID.getName() + ");");
        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.INSTANCES_ID.getName()).append(", ").append(Columns.EMAIL.getName()).append(", ").append(Columns.PASSWORD.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.INSTANCES_ID.getName()));
            value = values.getAsString(Columns.EMAIL.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PASSWORD.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

	/**
	 * Created in version 1
	 */
    public static final class Bugs extends BugDroidContent {

    	private static final String LOG_TAG = Bugs.class.getSimpleName();

        public static final String TABLE_NAME = "bugs";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-bugs";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-bugs";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            INSTANCES_ID("instances_id", "integer"),
            ACCOUNTS_ID("accounts_id", "integer"),
            BUG_ID("bug_id", "integer"),
            BOOKMARK("bookmark", "integer"),
            ASSIGNED_TO_NAME("assigned_to_name", "text"),
            ASSIGNED_TO_REAL_NAME("assigned_to_real_name", "text"),
            CLASSIFICATION("classification", "text"),
            COMPONENT("component", "text"),
            CREATION_TIME("creation_time", "text"),
            CREATOR_NAME("creator_name", "text"),
            CREATOR_REAL_NAME("creator_real_name", "text"),
            LAST_CHANGE_TIME("last_change_time", "integer"),
            OP_SYS("op_sys", "text"),
            PLATFORM("platform", "text"),
            PRIORITY("priority", "text"),
            PRODUCT("product", "text"),
            QA_CONTACT_NAME("qa_contact_name", "text"),
            QA_CONTACT_REAL_NAME("qa_contact_real_name", "text"),
            REF("ref", "text"),
            RESOLUTION("resolution", "text"),
            SEVERITY("severity", "text"),
            STATUS("status", "text"),
            SUMMARY("summary", "text"),
            TARGET_MILESTONE("target_milestone", "text"),
            VERSION("version", "text"),
            WHITEBOARD("whiteboard", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.INSTANCES_ID.getName(),
                Columns.ACCOUNTS_ID.getName(),
                Columns.BUG_ID.getName(),
                Columns.BOOKMARK.getName(),
                Columns.ASSIGNED_TO_NAME.getName(),
                Columns.ASSIGNED_TO_REAL_NAME.getName(),
                Columns.CLASSIFICATION.getName(),
                Columns.COMPONENT.getName(),
                Columns.CREATION_TIME.getName(),
                Columns.CREATOR_NAME.getName(),
                Columns.CREATOR_REAL_NAME.getName(),
                Columns.LAST_CHANGE_TIME.getName(),
                Columns.OP_SYS.getName(),
                Columns.PLATFORM.getName(),
                Columns.PRIORITY.getName(),
                Columns.PRODUCT.getName(),
                Columns.QA_CONTACT_NAME.getName(),
                Columns.QA_CONTACT_REAL_NAME.getName(),
                Columns.REF.getName(),
                Columns.RESOLUTION.getName(),
                Columns.SEVERITY.getName(),
                Columns.STATUS.getName(),
                Columns.SUMMARY.getName(),
                Columns.TARGET_MILESTONE.getName(),
                Columns.VERSION.getName(),
                Columns.WHITEBOARD.getName()
        };

        private Bugs() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.INSTANCES_ID.getName() + " " + Columns.INSTANCES_ID.getType() + ", " + Columns.ACCOUNTS_ID.getName() + " " + Columns.ACCOUNTS_ID.getType() + ", " + Columns.BUG_ID.getName() + " " + Columns.BUG_ID.getType() + ", " + Columns.BOOKMARK.getName() + " " + Columns.BOOKMARK.getType() + ", " + Columns.ASSIGNED_TO_NAME.getName() + " " + Columns.ASSIGNED_TO_NAME.getType() + ", " + Columns.ASSIGNED_TO_REAL_NAME.getName() + " " + Columns.ASSIGNED_TO_REAL_NAME.getType() + ", " + Columns.CLASSIFICATION.getName() + " " + Columns.CLASSIFICATION.getType() + ", " + Columns.COMPONENT.getName() + " " + Columns.COMPONENT.getType() + ", " + Columns.CREATION_TIME.getName() + " " + Columns.CREATION_TIME.getType() + ", " + Columns.CREATOR_NAME.getName() + " " + Columns.CREATOR_NAME.getType() + ", " + Columns.CREATOR_REAL_NAME.getName() + " " + Columns.CREATOR_REAL_NAME.getType() + ", " + Columns.LAST_CHANGE_TIME.getName() + " " + Columns.LAST_CHANGE_TIME.getType() + ", " + Columns.OP_SYS.getName() + " " + Columns.OP_SYS.getType() + ", " + Columns.PLATFORM.getName() + " " + Columns.PLATFORM.getType() + ", " + Columns.PRIORITY.getName() + " " + Columns.PRIORITY.getType() + ", " + Columns.PRODUCT.getName() + " " + Columns.PRODUCT.getType() + ", " + Columns.QA_CONTACT_NAME.getName() + " " + Columns.QA_CONTACT_NAME.getType() + ", " + Columns.QA_CONTACT_REAL_NAME.getName() + " " + Columns.QA_CONTACT_REAL_NAME.getType() + ", " + Columns.REF.getName() + " " + Columns.REF.getType() + ", " + Columns.RESOLUTION.getName() + " " + Columns.RESOLUTION.getType() + ", " + Columns.SEVERITY.getName() + " " + Columns.SEVERITY.getType() + ", " + Columns.STATUS.getName() + " " + Columns.STATUS.getType() + ", " + Columns.SUMMARY.getName() + " " + Columns.SUMMARY.getType() + ", " + Columns.TARGET_MILESTONE.getName() + " " + Columns.TARGET_MILESTONE.getType() + ", " + Columns.VERSION.getName() + " " + Columns.VERSION.getType() + ", " + Columns.WHITEBOARD.getName() + " " + Columns.WHITEBOARD.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX bugs_instances_id on " + TABLE_NAME + "(" + Columns.INSTANCES_ID.getName() + ");");
            db.execSQL("CREATE INDEX bugs_accounts_id on " + TABLE_NAME + "(" + Columns.ACCOUNTS_ID.getName() + ");");
            db.execSQL("CREATE INDEX bugs_bug_id on " + TABLE_NAME + "(" + Columns.BUG_ID.getName() + ");");
            db.execSQL("CREATE INDEX bugs_bookmark on " + TABLE_NAME + "(" + Columns.BOOKMARK.getName() + ");");
        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.INSTANCES_ID.getName()).append(", ").append(Columns.ACCOUNTS_ID.getName()).append(", ").append(Columns.BUG_ID.getName()).append(", ").append(Columns.BOOKMARK.getName()).append(", ").append(Columns.ASSIGNED_TO_NAME.getName()).append(", ").append(Columns.ASSIGNED_TO_REAL_NAME.getName()).append(", ").append(Columns.CLASSIFICATION.getName()).append(", ").append(Columns.COMPONENT.getName()).append(", ").append(Columns.CREATION_TIME.getName()).append(", ").append(Columns.CREATOR_NAME.getName()).append(", ").append(Columns.CREATOR_REAL_NAME.getName()).append(", ").append(Columns.LAST_CHANGE_TIME.getName()).append(", ").append(Columns.OP_SYS.getName()).append(", ").append(Columns.PLATFORM.getName()).append(", ").append(Columns.PRIORITY.getName()).append(", ").append(Columns.PRODUCT.getName()).append(", ").append(Columns.QA_CONTACT_NAME.getName()).append(", ").append(Columns.QA_CONTACT_REAL_NAME.getName()).append(", ").append(Columns.REF.getName()).append(", ").append(Columns.RESOLUTION.getName()).append(", ").append(Columns.SEVERITY.getName()).append(", ").append(Columns.STATUS.getName()).append(", ").append(Columns.SUMMARY.getName()).append(", ").append(Columns.TARGET_MILESTONE.getName()).append(", ").append(Columns.VERSION.getName()).append(", ").append(Columns.WHITEBOARD.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.INSTANCES_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.ACCOUNTS_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.BUG_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.BOOKMARK.getName()));
            value = values.getAsString(Columns.ASSIGNED_TO_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ASSIGNED_TO_REAL_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CLASSIFICATION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COMPONENT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CREATION_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CREATOR_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CREATOR_REAL_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.LAST_CHANGE_TIME.getName()));
            value = values.getAsString(Columns.OP_SYS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PLATFORM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PRIORITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.PRODUCT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.QA_CONTACT_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.QA_CONTACT_REAL_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.REF.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.RESOLUTION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SEVERITY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.STATUS.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUMMARY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TARGET_MILESTONE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.VERSION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.WHITEBOARD.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

	/**
	 * Created in version 1
	 */
    public static final class Comments extends BugDroidContent {

    	private static final String LOG_TAG = Comments.class.getSimpleName();

        public static final String TABLE_NAME = "comments";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-comments";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-comments";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            BUGS_ID("bugs_id", "integer"),
            COMMENT_ID("comment_id", "integer"),
            CREATION_TIME("creation_time", "text"),
            CREATOR_NAME("creator_name", "text"),
            CREATOR_REAL_NAME("creator_real_name", "text"),
            TEXT("text", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.BUGS_ID.getName(),
                Columns.COMMENT_ID.getName(),
                Columns.CREATION_TIME.getName(),
                Columns.CREATOR_NAME.getName(),
                Columns.CREATOR_REAL_NAME.getName(),
                Columns.TEXT.getName()
        };

        private Comments() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.BUGS_ID.getName() + " " + Columns.BUGS_ID.getType() + ", " + Columns.COMMENT_ID.getName() + " " + Columns.COMMENT_ID.getType() + ", " + Columns.CREATION_TIME.getName() + " " + Columns.CREATION_TIME.getType() + ", " + Columns.CREATOR_NAME.getName() + " " + Columns.CREATOR_NAME.getType() + ", " + Columns.CREATOR_REAL_NAME.getName() + " " + Columns.CREATOR_REAL_NAME.getType() + ", " + Columns.TEXT.getName() + " " + Columns.TEXT.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX comments_bugs_id on " + TABLE_NAME + "(" + Columns.BUGS_ID.getName() + ");");
        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.BUGS_ID.getName()).append(", ").append(Columns.COMMENT_ID.getName()).append(", ").append(Columns.CREATION_TIME.getName()).append(", ").append(Columns.CREATOR_NAME.getName()).append(", ").append(Columns.CREATOR_REAL_NAME.getName()).append(", ").append(Columns.TEXT.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.BUGS_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.COMMENT_ID.getName()));
            value = values.getAsString(Columns.CREATION_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CREATOR_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CREATOR_REAL_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TEXT.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

	/**
	 * Created in version 1
	 */
    public static final class Attachments extends BugDroidContent {

    	private static final String LOG_TAG = Attachments.class.getSimpleName();

        public static final String TABLE_NAME = "attachments";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-attachments";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-attachments";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            BUGS_ID("bugs_id", "integer"),
            ATTACHMENT_ID("attachment_id", "integer"),
            CREATION_TIME("creation_time", "text"),
            ATTACHER_NAME("attacher_name", "text"),
            ATTACHER_REAL_NAME("attacher_real_name", "text"),
            DESCRIPTION("description", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.BUGS_ID.getName(),
                Columns.ATTACHMENT_ID.getName(),
                Columns.CREATION_TIME.getName(),
                Columns.ATTACHER_NAME.getName(),
                Columns.ATTACHER_REAL_NAME.getName(),
                Columns.DESCRIPTION.getName()
        };

        private Attachments() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.BUGS_ID.getName() + " " + Columns.BUGS_ID.getType() + ", " + Columns.ATTACHMENT_ID.getName() + " " + Columns.ATTACHMENT_ID.getType() + ", " + Columns.CREATION_TIME.getName() + " " + Columns.CREATION_TIME.getType() + ", " + Columns.ATTACHER_NAME.getName() + " " + Columns.ATTACHER_NAME.getType() + ", " + Columns.ATTACHER_REAL_NAME.getName() + " " + Columns.ATTACHER_REAL_NAME.getType() + ", " + Columns.DESCRIPTION.getName() + " " + Columns.DESCRIPTION.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX attachments_bugs_id on " + TABLE_NAME + "(" + Columns.BUGS_ID.getName() + ");");
        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.BUGS_ID.getName()).append(", ").append(Columns.ATTACHMENT_ID.getName()).append(", ").append(Columns.CREATION_TIME.getName()).append(", ").append(Columns.ATTACHER_NAME.getName()).append(", ").append(Columns.ATTACHER_REAL_NAME.getName()).append(", ").append(Columns.DESCRIPTION.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.BUGS_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.ATTACHMENT_ID.getName()));
            value = values.getAsString(Columns.CREATION_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ATTACHER_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.ATTACHER_REAL_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESCRIPTION.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

	/**
	 * Created in version 1
	 */
    public static final class Flags extends BugDroidContent {

    	private static final String LOG_TAG = Flags.class.getSimpleName();

        public static final String TABLE_NAME = "flags";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-flags";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-flags";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            ATTACHMENTS_ID("attachments_id", "integer"),
            FLAG_ID("flag_id", "integer"),
            NAME("name", "text"),
            SETTER_NAME("setter_name", "text"),
            SETTER_REAL_NAME("setter_real_name", "text"),
            STATUS("status", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.ATTACHMENTS_ID.getName(),
                Columns.FLAG_ID.getName(),
                Columns.NAME.getName(),
                Columns.SETTER_NAME.getName(),
                Columns.SETTER_REAL_NAME.getName(),
                Columns.STATUS.getName()
        };

        private Flags() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.ATTACHMENTS_ID.getName() + " " + Columns.ATTACHMENTS_ID.getType() + ", " + Columns.FLAG_ID.getName() + " " + Columns.FLAG_ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.SETTER_NAME.getName() + " " + Columns.SETTER_NAME.getType() + ", " + Columns.SETTER_REAL_NAME.getName() + " " + Columns.SETTER_REAL_NAME.getType() + ", " + Columns.STATUS.getName() + " " + Columns.STATUS.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX flags_attachments_id on " + TABLE_NAME + "(" + Columns.ATTACHMENTS_ID.getName() + ");");
        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ATTACHMENTS_ID.getName()).append(", ").append(Columns.FLAG_ID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.SETTER_NAME.getName()).append(", ").append(Columns.SETTER_REAL_NAME.getName()).append(", ").append(Columns.STATUS.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ATTACHMENTS_ID.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.FLAG_ID.getName()));
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SETTER_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SETTER_REAL_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.STATUS.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

	/**
	 * Created in version 1
	 */
    public static final class Ccs extends BugDroidContent {

    	private static final String LOG_TAG = Ccs.class.getSimpleName();

        public static final String TABLE_NAME = "ccs";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/bugdroid-ccs";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/bugdroid-ccs";

        public static final Uri CONTENT_URI = Uri.parse(BugDroidContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            BUGS_ID("bugs_id", "integer"),
            NAME("name", "text"),
            REAL_NAME("real_name", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.BUGS_ID.getName(),
                Columns.NAME.getName(),
                Columns.REAL_NAME.getName()
        };

        private Ccs() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.BUGS_ID.getName() + " " + Columns.BUGS_ID.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.REAL_NAME.getName() + " " + Columns.REAL_NAME.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX ccs_bugs_id on " + TABLE_NAME + "(" + Columns.BUGS_ID.getName() + ");");
        }

		// Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion 
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version " 
                        + newVersion);
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.BUGS_ID.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.REAL_NAME.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.BUGS_ID.getName()));
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.REAL_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}

